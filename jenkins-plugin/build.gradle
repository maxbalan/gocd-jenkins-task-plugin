apply plugin: 'groovy'

def gitRevision = { ->
  def hashStdOut = new ByteArrayOutputStream()
  exec {
    commandLine "git", "log", "-n", "1", "--format=%H"
    standardOutput = hashStdOut
  }

  return hashStdOut.toString().trim()
}

project.ext.gitRevision = gitRevision()

group = 'groovy.io.maxbalan.gocd.plugin.jenkins'
version = '1.1.0'

// these values for plugin.xml
project.ext.pluginDesc = [
  id         : 'jenkins.task.plugin',
  version    : project.version,
  goCdVersion: '20.1.0',
  name       : 'Jenkins Task Plugin',
  description: 'A plugin to trigger remote jobs on Jenkins Server',
  vendorName : 'Maxim Balan',
  vendorUrl  : 'https://github.com/maxbalan/gocd-jenkins-task-plugin'
]

sourceCompatibility = 1.11
targetCompatibility = 1.11

repositories {
  jcenter()
  mavenLocal()
}

sourceSets {
  test {
    java {
      compileClasspath += configurations.compileOnly
      runtimeClasspath += configurations.compileOnly
    }
  }
}
ext {
  spockVersion = '1.3-groovy-2.5'
  groovyVersion = '2.5.8'
  gocdPluginApiVersion='20.1.0'
  jenkinsSdkVersion='0.3.8'
}
dependencies {
  compileOnly group: 'cd.go.plugin', name: 'go-plugin-api', version: gocdPluginApiVersion
  compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
  compile group: 'commons-io', name: 'commons-io', version: '2.6'
  compile group: 'com.offbytwo.jenkins', name: 'jenkins-client', version: jenkinsSdkVersion
  compile group: 'org.codehaus.groovy', name: 'groovy-all', version: groovyVersion
  compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'
  compile group: 'com.google.guava', name: 'guava', version: '28.2-jre'

  //testing
  //this is here because gocd plugin is missing the LoggingService class which is part of
  // com.thoughtworks.go.plugin.internal.api.LoggingService
  testCompile project(':gocd')
  testCompile group: 'org.spockframework', name: 'spock-core', version: spockVersion
  testCompile group: 'cglib', name: 'cglib', version: '3.3.0'
  testCompile group: 'org.objenesis', name: 'objenesis', version: '3.1'
}

processResources {
  from("src/main/resources") {
    filesMatching('plugin.xml') {
      expand project.pluginDesc
    }

    filesMatching('plugin.properties') {
      expand project.pluginDesc
    }
  }
}

test {
  testLogging {
    showStandardStreams = true

    exceptionFormat 'full'

    beforeSuite { suite ->
      if (suite.parent) {
        logger.quiet("Running ${suite.name}")
      }
    }

    afterSuite { suite, result ->
      if (suite.parent) {
        logger.quiet("Tests run: ${result.testCount}, Failures: ${result.failedTestCount}, Skipped: ${result.skippedTestCount}, Time elapsed: ${(result.endTime - result.startTime) / 1000.00} sec")
        if (result.resultType == TestResult.ResultType.FAILURE) {
          logger.quiet("Test ${suite.name} FAILED")
        }
      } else {
        logger.quiet("Total tests run: ${result.testCount}, Failures: ${result.failedTestCount}, Skipped: ${result.skippedTestCount}, Time elapsed: ${(result.endTime - result.startTime) / 1000.00} sec")
      }
    }
  }
}

jar {
  manifest {
    attributes(
      'Go-Version': project.version,
      'ImplementationVersion': project.version,
      'Go-Revision': project.gitRevision,
      'Implementation-Title': project.name,
      'Implementation-Version': project.version,
      'Source-Compatibility': project.sourceCompatibility,
      'Target-Compatibility': project.targetCompatibility
    )
  }

  from(configurations.compile) {
    into "lib/"
  }
  from(sourceSets.main.java) {
    into "/"
  }
}

assemble.dependsOn([clean])
